@{
  Layout = "_Layout";
  ViewData["Title"] = "Accounts Search";
}

<style type="text/css" media="all">
  .input-container {
    display: flex;
    justify-content: center;
    font-size: 24px;
  }

  .input-container > * {
    margin: 5px;
  }
</style>

<body>
  <div class="input-container" data-signals="{search: '', size: 100}">
    <label>Search First Names: </label>
    <input type="text"
    data-bind-search
    data-on-signal-change__debounce.100ms="@@post('/Datastar/AccountsListFilter')"
    placeholder="Search..." />
  </div>
  <div class="mt-3 input-container">
    <label>Set Size: </label>
    <input type="number"
    data-bind-size />
  </div>
  <div>
    <p>Next up is incremental searching in a table of records. Here we have the ability to, in real time, filter results that fit what we are searching, all within an MPA. This is a demonstration of triggers again. Here we are triggering on keyup, where checks occur every 100ms. If triggered, we make a request to filter the table further, but none of that filtering is taking place in the client; it is all server-side. </p>
    <p>Compared to the HTMX version, this implementation is much simpler. It cut down the number of endpoints from 3 to 2, and makes the coordination of custom HTMX events to trigger not necessary, as the count will be swapped in at the same time as the new table data, which also reduces the number of round trips for HTTP requests from 2 to 1 for new filters applied. We are tracking two signals: search term and size. The search term is what we filter the first names on, and the size is the number of elements to fetch and put in the table. If we wanted to, we could reduce the amount of total data by only updating the count signal and binding the red count value to the signal, but considering that I was attempting to replicate the HTMX way, I rendered the partial fragment and send that to be merged instead.</p>
  </div>

  <br>

  <div id="counter"></div>

  <hr />

  <table class="table" data-on-load="@@post('/Datastar/AccountsListFilter')">
    <thead>
      <tr>
        <th>
          EmpId
        </th>
        <th>
          NamePrefix
        </th>
        <th>
          FirstName
        </th>
        <th>
          MiddleInitial
        </th>
        <th>
          LastName
        </th>
        <th>
          Gender
        </th>
        <th>
          Email
        </th>
      </tr>
    </thead>
    <tbody id="tablecontent"></tbody>
  </table>

</body>
