@model DemoObject
@using dotnet_html_sortable_table.Models;

@{
  ViewData["Title"] = "Sortable List";
}

<head>
<style>
th:hover {
  background-color: #d6d6d6
}
</style>
</head>

<div>
  <h1>Howdy!</h1>
  <p>This is the first of the Datastar demo pages. This is a demonstration of how, given a table of elements that we want to enable sorting upon, we can make simple, small requests to the server to sort the data in a particular way whenever we click the column headers and change the input box for the size. The server can be in charge of maintaining the state, and ultimately is responsible for the persistence, but we are storing the client state of the input element and the signals in the client. Here we have three signals: column, direction, and size. The column signal tells us which column to sort on, the direction signal which way to sort the column, and the size signal how many elements in the table to include. From our simple request when signals change, which is throttled to prevent spamming the mouse on a column header, and debounced to enable only one signal state change being picked up when multiple signals change very quickly, we can put together a sorted table in the server that streams back to the client via HTTP SSE streams. Any data being streamed, whether it's updates to signals, or new DOM fragments to be morphed in the DOM by id, can be sent down in one long living connection that has all the benefits of websockets, but none of the hassle of managing connection issues. We can build incredibly reactive UIs using signals and simple HTML.</p>
</div>
<hr />

<div id="test" class="text-center mb-3">
  Nothing here yet...
</div>

<div data-signals="{sort: {direction: false, col: 0, size: 100}, count: 0}"> </div>
<div class="text-center">
  <p>Column being sorted: <span class="font-weight-bold" data-text="$sort.col"></span>, with direction: <span data-text="!$sort.direction ? 'Ascending' : 'Descending'"></span>, and size: <span data-text="$sort.size"></span></p>
  <p>Count value: <span data-text="$count"></span></p>
</div>
<div class="d-flex">
  <span class="d-inline align-content-center me-3">Size</span>
  <input class="d-inline form-control" data-bind="$sort.size" type="number" name="size" />
</div>

@await Html.PartialAsync("_TableLoading", false)

<table class="table" id="table" data-on-load="@@get('/Datastar/SortableList')">

  @await Html.PartialAsync("_TableHeaders", false)
  @await Html.PartialAsync("_TableData", Model.Table)

</table>
